Goroutine 

- Goroutine adalah sebuah thread yg dikelola Go-Runtime
- Goroutine sangat ringan (2Kb/Goroutine), dibandingkan dengan thread(1MB/Goroutine)
- Goroutine berjalan secara concurrent , thread berjalan paralel

Cara Kerja Goroutine
- Goroutine dijalankan oleh Go-Scheduler, dimana jumlah threadnya sebanyak CPU
- Goroutine berjalan diatas thread
- Namun kita tidak perlu management thread secara manual karena semua diatur oleh Go-Scheduler

Cara Kerja Go-Scheduler
- Dalam Go-Scheduler ada beberapa terminologi
    1. G : Goroutine
    2. M : Thread(Machine)
    3. P : Processor


Channel
    - Channel adalah tempat komunikasi secara synchronous yg dilakukan Goroutine
    - Dalam Channel ada pengirim dan penerima yg biasanya berupa Goroutine yg berbeda
    - Saat pengiriman data ke dalam Channel, Goroutine akan blocking sampai ada yg menerima data tersebut
    - Mekanisme Channel hampir sama dengan async/await pada bahasa pemrograman lain
    - Atau dapat disimpulkan Channel adalah alat komunikasi data synchronous(blocking)

Karakteristik Channel
    - Secara default channel hanya bisa menampung satu tipe data, jika ingin menambah data harus menunggu data tersebut ada yg mengambil
    - Channel hanya bisa menerima 1 tipe data
    - Channel bisa diambil oleh beberapa Goroutine
    - Channel harus di close jika selesai digunakan agar tidak menyebabkan memory leak

Channel sebagai Parameter
    - Dalam praktek pembuatan design app kita akan mengirim channel ke function lain via Parameter
    - Dalam Golang defaultnya parameter adalah 'Pass by Value' artinya value akan di duplikasi lalu dikirim
        ke function parameter, sehingga jika kita ingin mengirim data asli maka harus menggunakan pointer
        agar 'Pass by Reference'
    - Dalam channel kita tidak perlu mengakses pointer Parameter

Buffered Channel

    - Buffered Channel Adalah buffer yg bisa digunakan untuk menampung data Antrian di Channel
    - Kapasitasnya Bebas sesuai kebutuhan channel 

Race Condition

    - Race Condition adalah masalah pada Goroutine
    - Saat kita menggunakan Goroutine, dia tidak hanya berjalan secara concurrent tetapi juga secara paralel
    - Hal ini sangat bahaya ketika kita melakukan manipulasi data variabel yg sama oleh beberapa Goroutine secara bersamaan

Sync.Mutex

    - Untuk megatasi masalah pada Race Condition kita bisa menggunakan package Mutex
    - Mutex digunakan untuk locking dan unlocking
    - Dengan demikian jika ada beberapa Goroutine melakukan lock terhadap mutex maka hanya ada 1 Goroutine yg berjalan, setelah unlock Goroutine selanjutnya baru bisa locking lagi
    - Ini sangat cocok sebagai solusi terhadap race Condition
    - Resiko menggunakan sync.Mutex adalah latency beberapa nano second

RW.Mutex(Read & Write)
    - Kadang kita menghadapi case dimana kita ingin melakukan locking tidak hanya pada proses merubah data, tetapi juga saat membaca data
    - Jika kita menggunakan mutex saja maka akan terjadi rebutan antar proses membaca dan merubah
    - Untuk mengatasi hal tersebut maka kita bisa menggunakan package RW.Mutex untuk menangani dua lock , lock Read dan lock Write

DeadLock

    - Hati2 saat kita membuat app yg paralel Atau concurrent, masalahnya kita akan sering menghadapi DeadLock
    - DeadLock adalah keadaan dimana proses Goroutine saling menunggu lock sehingga tidak ada satupun Goroutine yg berjalan
    
Wait Group
    - Wait Group adalah  fitur yg bisa digunakan untuk menunggu sebuah proses selesai digunakan
    - Hal ini dibutuhkan ketika kita menjalankan proses Goroutine, tapi kita ingin semua proses selesai dahulu sebelum sebuah app selesai
    - Kasus diatas bisa menggunakan Wait Group
    - Untuk menggunakannya kita bisa menggunakan method
        Add(int) Jumlah value
        Done() Setelah selesai menngunakan proses Goroutine
        Wait() Untuk menunggu proses selesai


Sync.Once
    - Once adalah fitur Golang yg digunakan untuk memastikan sebuah function di eksekusi hanya sekali
    - Berapapun Goroutine yg mengakses, bisa dipastikan bahwa Goroutine yg pertama yg hanya bisa mengakses fungsi tersebut
    - Goroutine yg lain akan dihiraukan, artinya function tersebut tidak akan di eksekusi lagi 

Sync.Pool
    - Pool adalah implementasi dari design pattern bernama object pool pattern
    - Simple nya design pattern Pool digunakan untuk menyimpan data, menggunakan datanya kita ambil dari Pool, dan setelah selesai menggunakan data kita simpan kembali dalam Pool
    - implementasi Pool disini sudah aman dari Race Condition
    - Biasanya digunakan dalam koneksi ke database
